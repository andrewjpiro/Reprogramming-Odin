// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DefaultPneumatics.h"
#include "Commands/LowerBAD.h"
#include "Commands/ManualShooter.h"
#include "Commands/RaiseBAD.h"
#include "Commands/SetBAD.h"
#include "Commands/SetConveyor.h"
#include "Commands/SetIntake.h"
#include "Commands/Shift.h"
#include "Commands/SwitchBalanceMode.h"
#include "Commands/SwitchBayDoors.h"
#include "Commands/SwitchBrakeMode.h"
#include "Commands/SwitchHood.h"
#include "Commands/SwitchIntake.h"
#include "Commands/TankDrive.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	driver = new Joystick(1);
	
	dRightStick = new JoystickButton(driver, 10);
	dRightStick->WhileHeld(new Shift());
	dBack = new JoystickButton(driver, 7);
	dBack->WhileHeld(new SwitchBalanceMode());
	dButtonB = new JoystickButton(driver, 2);
	dButtonB->WhileHeld(new ManualShooter());
	coDriver = new Joystick(2);
	
	cStart = new JoystickButton(coDriver, 8);
	cStart->WhileHeld(new SwitchHood());
	cBack = new JoystickButton(coDriver, 7);
	cBack->WhileHeld(new SwitchHood());
	cRightBumper = new JoystickButton(coDriver, 6);
	cRightBumper->WhileHeld(new RaiseBAD());
	cLeftBumper = new JoystickButton(coDriver, 5);
	cLeftBumper->WhileHeld(new LowerBAD());
	cButtonY = new JoystickButton(coDriver, 4);
	cButtonY->WhileHeld(new SetConveyor());
	cButtonX = new JoystickButton(coDriver, 3);
	cButtonX->WhileHeld(new SetConveyor());
	cButtonB = new JoystickButton(coDriver, 1);
	cButtonB->WhileHeld(new ManualShooter());
	cButtonA = new JoystickButton(coDriver, 1);
	cButtonA->WhileHeld(new SwitchIntake());
     

        // SmartDashboard Buttons
	SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());

	SmartDashboard::PutData("TankDrive", new TankDrive());

	SmartDashboard::PutData("SetIntake", new SetIntake());

	SmartDashboard::PutData("SetBAD", new SetBAD());

	SmartDashboard::PutData("ManualShooter", new ManualShooter());

	SmartDashboard::PutData("SetConveyor", new SetConveyor());

	SmartDashboard::PutData("LowerBAD", new LowerBAD());

	SmartDashboard::PutData("RaiseBAD", new RaiseBAD());

	SmartDashboard::PutData("SwitchIntake", new SwitchIntake());

	SmartDashboard::PutData("DefaultPneumatics", new DefaultPneumatics());

	SmartDashboard::PutData("SwitchBayDoors", new SwitchBayDoors());

	SmartDashboard::PutData("SwitchHood", new SwitchHood());

	SmartDashboard::PutData("Shift", new Shift());

	SmartDashboard::PutData("SwitchBalanceMode", new SwitchBalanceMode());

	SmartDashboard::PutData("SwitchBrakeMode", new SwitchBrakeMode());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

Joystick* OI::getDriver() {
	return driver;
}

Joystick* OI::getCoDriver() {
	return coDriver;
}

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
